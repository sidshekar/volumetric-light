#version 440 core

#define WORK_GROUP_SIZE 512

layout( local_size_x = WORK_GROUP_SIZE, local_size_y = 1, local_size_z = 1 ) in;


layout(std430, binding = 0) buffer positionBuffer{vec4 position[]; };

layout(std430, binding = 3) buffer camPosBuffer{float camPosition[]; };

//
// Debug:   fxc /E cs_main /T cs_5_0 /Fh (output) /Od /Vn g_BitonicSortCS /Zi (this)
// Release: fxc /E cs_main /T cs_5_0 /Fh (output) /O1 /Vn g_BitonicSortCS (this)
//

// number of threads
#define THREADS_X  512
// number of sort elements
#define ELEMENTS_TO_SORT  ( 1 << 10 )


// Input / output buffer
//RWBuffer< int > SortingBuffer : register( u0 );


//[ numthreads( THREADS_X, 1, 1 ) ]


void main(  )
{
	
	//uint3 GroupID : SV_GroupID,
    //uint3 GroupThreadID : SV_GroupThreadID,
    //uint  GroupIndex : SV_GroupIndex,
    //uint3 DispatchThreadID : SV_DispatchThreadID
	
	uint  GroupIndex = gl_LocalInvocationIndex;
	
    //
    // In the GPUSorting application, when performing byte-nick sorting,
    // ELEMENTS_TO_SORT / 2 We need to dispatch threads.
    //
    // However, since the maximum number of threads that can be executed in one thread group is 1,024 in DirectX 11,
    // The number of threads executed in one thread group is fixed with THREADS_X,
    // Process with one thread making multiple comparisons.
    // (ELEMENTS_TO_SORT must be at least THREADS_X * 2 or more)
    //

	
		
    for(uint i = 2; i <= ELEMENTS_TO_SORT; i <<= 1 )
    {
        for( uint j = i >> 1; j > 0; j >>= 1 )
        {
            for( uint k = GroupIndex; k < ELEMENTS_TO_SORT >> 1; k += WORK_GROUP_SIZE )
            {
                uint l = k / j * j + k;

				uint tr = k & ( i >> 1);
				
                if (bool(tr))
                {
                    // Descending order
                    if ( camPosition[ l ] < camPosition[ l + j ]) 
                    {
                        vec4 temp         = position[ l ];
                        position[ l ]     = position[ l + j ];
                        position[ l + j ] = temp;
                    }
                }
                else
                {
                    // Ascending order
                    if ( camPosition[ l ] > camPosition[ l + j ] )
                    {
                        vec4 temp         = position[ l ];
                        position[ l ]     = position[ l + j ];
                        position[ l + j ] = temp;
                    }
                }
            }

            // We align footprint every comparing stage one step
            //DeviceMemoryBarrierWithGroupSync();
        }
    }
}



/*
void main(){
	
	
    uint i = gl_GlobalInvocationID.x;

    
	vec3 gravity = vec3(0.0f, -9.8 * .0167f, 0.0f);
	velocity[i].xyz+= gravity;
	
	position[i].xyz+= velocity[i].xyz;
	position[i].w -= 2.5 * 0.0167f;

		if(position[i].w <= 0.0f){
			
			position[i].xyzw =  vec4(0.0f, 0.0f, 0.0f, initVelocity[i].w);
			
			velocity[i] = initVelocity[i];
	
		}
	

}*/